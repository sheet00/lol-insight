<template>
  <div class="min-h-screen bg-gray-50">
    <!-- 帯状ヘッダ（トップの余白0） -->
    <header class="sticky top-0 z-50 w-full bg-white/90 backdrop-blur border-b">
      <div class="mx-auto max-w-7xl px-4">
        <div class="h-14 flex items-center justify-between gap-4">
          <div class="min-w-0">
            <h1 class="text-lg font-bold text-gray-900 leading-none">LoL Insight</h1>
            <p class="hidden sm:block text-xs text-gray-600 truncate">最新試合のマッチアップを分析</p>
          </div>

          <!-- 検索フォーム（ヘッダ内・コンパクト） -->
          <form @submit.prevent="searchSummoner" class="flex items-center gap-2 w-full sm:w-auto max-w-md">
            <input
              v-model="searchForm.summonerName"
              type="text"
              required
              class="flex-1 min-w-0 px-3 py-1.5 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
              placeholder="ゲーム名"
            />
            <input
              v-model="searchForm.tagLine"
              type="text"
              required
              class="w-20 px-3 py-1.5 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
              placeholder="JP1"
            />
            <button
              type="submit"
              :disabled="loading"
              class="btn-primary disabled:opacity-50 disabled:cursor-not-allowed h-9 px-3 text-sm flex items-center justify-center"
            >
              <span v-if="loading" class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
              {{ loading ? '分析中...' : 'マッチ分析' }}
            </button>
          </form>
        </div>
      </div>
    </header>

    <!-- メインコンテンツ -->
    <div class="container mx-auto px-4 py-10">
      <div class="max-w-7xl mx-auto">

        <!-- 分析対象プレイヤー表示 -->
        <div v-if="summonerData && !matchData && !liveMatchData" class="card text-center">
          <div class="py-8">
            <div class="text-2xl font-bold text-gray-900 mb-2">
              {{ summonerData.account.gameName }}#{{ summonerData.account.tagLine }}
            </div>
            <div class="text-gray-600 mb-4">
              プレイヤーの試合情報を分析中...
            </div>
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          </div>
        </div>

        <!-- 進行中試合分析結果 -->
        <div v-if="liveMatchData" class="space-y-6">
          <!-- 進行中試合ヘッダー -->
          <div class="card">
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6">
              <div>
                <h2 class="text-xl font-bold text-gray-900 flex items-center space-x-2">
                  <span>進行中の試合</span>
                  <span class="text-green-600 text-sm font-normal">LIVE</span>
                </h2>
                <p class="text-gray-600">
                  {{ formatGameMode(liveMatchData.gameInfo.queueId) }} - {{ formatGameTime(liveMatchData.gameInfo.gameLength) }}経過
                </p>
              </div>
              
              <div class="flex items-center gap-3">
                <button
                  class="btn-primary px-4 py-2 text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                  :disabled="isAdviceGenerating"
                  @click="onRegenerateAdvice"
                >
                  {{ isAdviceGenerating ? 'アドバイス生成中…' : 'アドバイス再生成' }}
                </button>
                <div class="text-center">
                  <div class="text-2xl font-bold text-green-600">
                    進行中
                  </div>
                  <div class="text-sm text-gray-500">ゲーム状況</div>
                </div>
              </div>
            </div>
          </div>

          <!-- ライブマッチアップ詳細 -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- 味方チーム -->
            <div class="card">
              <div class="flex items-center justify-between mb-4">
                <div>
                  <h3 class="text-lg font-semibold text-blue-600">
                    味方チーム
                  </h3>
                  <div v-if="liveMatchData.teamAverages" class="text-sm text-gray-600">
                    平均ティア: <span class="font-semibold text-blue-600">{{ formatTierScore(liveMatchData.teamAverages.myTeam.tierScore) }}</span>
                  </div>
                </div>
                <div class="text-sm font-medium px-3 py-1 rounded-full bg-blue-100 text-blue-800">
                  あなたのチーム
                </div>
              </div>
              <div class="space-y-3">
                <div v-for="player in liveMatchData.myTeam" :key="player.puuid" 
                     class="flex items-center justify-between p-3 rounded-lg transition-colors"
                     :class="player.puuid === liveMatchData.myParticipant.puuid ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50 hover:bg-gray-100'">
                  <div>
                    <div class="font-medium text-gray-900">{{ getChampionName(player.championId) }}</div>
                    <div class="text-sm text-gray-600">{{ getSummonerSpellName(player.spell1Id) }}/{{ getSummonerSpellName(player.spell2Id) }}</div>
                  </div>
                  <div class="text-right">
                    <div class="text-xs" :class="player.rank ? 'text-blue-600' : 'text-gray-500'">
                      {{ player.rank ? `${player.rank.tier} ${player.rank.rank}` : `レベル${player.summonerLevel || 0}` }}
                    </div>
                    <div v-if="player.rank" class="text-xs text-gray-500" :title="`${player.rank.queueType}の戦績`">
                      Win {{ player.rank.wins }} Lose {{ player.rank.losses }} ({{ player.rank.winRate }}%)
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- 敵チーム -->
            <div class="card">
              <div class="flex items-center justify-between mb-4">
                <div>
                  <h3 class="text-lg font-semibold text-red-600">
                    敵チーム
                  </h3>
                  <div v-if="liveMatchData.teamAverages" class="text-sm text-gray-600">
                    平均ティア: <span class="font-semibold text-red-600">{{ formatTierScore(liveMatchData.teamAverages.enemyTeam.tierScore) }}</span>
                  </div>
                </div>
                <div class="text-sm font-medium px-3 py-1 rounded-full bg-red-100 text-red-800">
                  相手チーム
                </div>
              </div>
              <div class="space-y-3">
                <div v-for="player in liveMatchData.enemyTeam" :key="player.puuid" 
                     class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <div>
                    <div class="font-medium text-gray-900">{{ getChampionName(player.championId) }}</div>
                    <div class="text-sm text-gray-600">{{ getSummonerSpellName(player.spell1Id) }}/{{ getSummonerSpellName(player.spell2Id) }}</div>
                  </div>
                  <div class="text-right">
                    <div class="text-xs" :class="player.rank ? 'text-red-600' : 'text-gray-500'">
                      {{ player.rank ? `${player.rank.tier} ${player.rank.rank}` : `レベル${player.summonerLevel || 0}` }}
                    </div>
                    <div v-if="player.rank" class="text-xs text-gray-500" :title="`${player.rank.queueType}の戦績`">
                      Win {{ player.rank.wins }} Lose {{ player.rank.losses }} ({{ player.rank.winRate }}%)
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- AIアドバイス（新スキーマ対応） -->
          <div class="card">
            <div class="flex items-center justify-between mb-3">
              <h3 class="text-lg font-semibold">AI アドバイス</h3>
              <button
                class="btn-secondary px-3 py-1.5 text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                :disabled="isAdviceGenerating || !liveMatchData"
                @click="onRegenerateAdvice"
              >
                {{ isAdviceGenerating ? '生成中…' : '再生成' }}
              </button>
            </div>
            <div v-if="isAdviceGenerating" class="text-gray-500">アドバイス生成中…</div>
            <div v-else-if="aiAdvice">
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- 警戒対象 -->
                <div>
                  <div class="text-sm font-semibold text-gray-700 mb-1">警戒対象</div>
                  <div v-if="aiAdvice['警戒対象']?.length" class="space-y-2">
                    <div v-for="(t, i) in aiAdvice['警戒対象']" :key="'w'+i" class="p-3 rounded border bg-gray-50">
                      <div class="font-medium">{{ t.名前 }} <span class="text-xs text-gray-500">{{ t.ロール }}</span></div>
                      <div class="text-xs text-gray-600">理由: {{ t.理由 }}</div>
                      <ul class="list-disc pl-5 mt-1 text-sm">
                        <li v-for="(a, j) in t.対処行動" :key="'wa'+i+'-'+j">{{ a }}</li>
                      </ul>
                    </div>
                  </div>
                  <div v-else class="text-gray-500 text-sm">なし</div>
                </div>

                <!-- 討伐優先 -->
                <div>
                  <div class="text-sm font-semibold text-gray-700 mb-1">討伐優先</div>
                  <div v-if="aiAdvice['討伐優先']?.length" class="space-y-2">
                    <div v-for="(t, i) in aiAdvice['討伐優先']" :key="'k'+i" class="p-3 rounded border bg-gray-50">
                      <div class="font-medium">{{ t.名前 }} <span class="text-xs text-gray-500">{{ t.ロール }}</span></div>
                      <div class="text-xs text-gray-600">理由: {{ t.理由 }}</div>
                      <ul class="list-disc pl-5 mt-1 text-sm">
                        <li v-for="(a, j) in t.倒し方" :key="'ka'+i+'-'+j">{{ a }}</li>
                      </ul>
                    </div>
                  </div>
                  <div v-else class="text-gray-500 text-sm">なし</div>
                </div>

                <!-- ビルド方針 -->
                <div class="lg:col-span-2">
                  <div class="text-sm font-semibold text-gray-700 mb-1">ビルド方針</div>
                  <div v-if="aiAdvice['ビルド方針']" class="p-3 rounded border bg-gray-50">
                    <div class="text-sm">ダメージタイプ: <span class="font-medium">{{ aiAdvice['ビルド方針']['ダメージタイプ'] }}</span> / プレイスタイル: <span class="font-medium">{{ aiAdvice['ビルド方針']['プレイスタイル'] }}</span></div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-2 text-sm">
                      <div>
                        <div class="text-gray-600">最初の購入</div>
                        <ul class="list-disc pl-5">
                          <li v-for="(it, i) in (aiAdvice['ビルド方針']['最初の購入'] || [])" :key="'bi'+i">{{ it }}</li>
                        </ul>
                      </div>
                      <div>
                        <div class="text-gray-600">コア</div>
                        <ul class="list-disc pl-5">
                          <li v-for="(it, i) in (aiAdvice['ビルド方針']['コア'] || [])" :key="'bc'+i">{{ it }}</li>
                        </ul>
                      </div>
                      <div>
                        <div class="text-gray-600">状況対応</div>
                        <ul class="list-disc pl-5">
                          <li v-for="(it, i) in (aiAdvice['ビルド方針']['状況対応'] || [])" :key="'bs'+i">{{ it }}</li>
                        </ul>
                      </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-2 text-sm">
                      <div>
                        <div class="text-gray-600">ルーン</div>
                        <div>キーストーン: {{ aiAdvice['ビルド方針']['ルーン']?.['キーストーン'] }}</div>
                        <div>主要: {{ (aiAdvice['ビルド方針']['ルーン']?.['主要'] || []).join(', ') }}</div>
                        <div>副: {{ (aiAdvice['ビルド方針']['ルーン']?.['副'] || []).join(', ') }}</div>
                      </div>
                      <div>
                        <div class="text-gray-600">サモナースペル</div>
                        <div>{{ (aiAdvice['ビルド方針']['サモナースペル'] || []).join(', ') }}</div>
                      </div>
                      <div>
                        <div class="text-gray-600">切替条件</div>
                        <ul class="list-disc pl-5">
                          <li v-for="(c, i) in (aiAdvice['ビルド方針']['切替条件'] || [])" :key="'bt'+i">{{ c }}</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- 自分の行動計画 -->
                <div class="lg:col-span-2">
                  <div class="text-sm font-semibold text-gray-700 mb-1">自分の行動計画</div>
                  <div class="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
                    <div v-for="phase in ['レーン戦(0-5分)','レーン戦(5-14分)','中盤(14-22分)','終盤(22分〜)']" :key="phase" class="p-3 rounded border bg-gray-50">
                      <div class="font-medium">{{ phase }}</div>
                      <ul class="list-disc pl-5 mt-1">
                        <li v-for="(s, i) in (aiAdvice['自分の行動計画']?.[phase] || [])" :key="phase + i">{{ s }}</li>
                      </ul>
                    </div>
                  </div>
                </div>

                <!-- 具体アクションTOP5 / リスク -->
                <div>
                  <div class="text-sm font-semibold text-gray-700 mb-1">具体アクションTOP5</div>
                  <ul class="list-decimal pl-5 text-sm">
                    <li v-for="(a, i) in (aiAdvice['具体アクションTOP5'] || [])" :key="'top'+i">{{ a }}</li>
                  </ul>
                </div>
                <div>
                  <div class="text-sm font-semibold text-gray-700 mb-1">リスクシグナル</div>
                  <ul class="list-disc pl-5 text-sm">
                    <li v-for="(r, i) in (aiAdvice['リスクシグナル'] || [])" :key="'risk'+i">{{ r }}</li>
                  </ul>
                </div>

                <!-- 不足データ / 確信度 -->
                <div class="lg:col-span-2 flex items-center justify-between text-sm text-gray-600">
                  <div>
                    不足データ: <span class="text-gray-800">{{ (aiAdvice['不足データ'] || []).join(', ') || 'なし' }}</span>
                  </div>
                  <div>
                    確信度: <span class="text-gray-800">{{ aiAdvice['確信度'] }}</span>
                  </div>
                </div>
              </div>
            </div>
            <div v-else class="text-gray-500">まだアドバイスはありません</div>
          </div>
        </div>

        <!-- 過去試合分析結果 -->
        <div v-if="matchData" class="space-y-6">
          <!-- 分析対象プレイヤーとゲーム情報 -->
          <div class="card">
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6">
              <div>
                <h2 class="text-xl font-bold text-gray-900">
                  {{ matchData.myParticipant.summonerName }}
                </h2>
                <p class="text-gray-600">
                  {{ getChampionName(matchData.myParticipant.championId) }} - {{ formatGameMode(matchData.gameInfo.queueId) }}
                </p>
              </div>
              
              <div class="flex items-center space-x-6">
                <div class="text-center">
                  <div class="text-2xl font-bold" :class="matchData.myParticipant.win ? 'text-green-600' : 'text-red-600'">
                    {{ matchData.myParticipant.win ? '勝利' : '敗北' }}
                  </div>
                  <div class="text-sm text-gray-500">結果</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-gray-800">
                    {{ matchData.myParticipant.kills }}/{{ matchData.myParticipant.deaths }}/{{ matchData.myParticipant.assists }}
                  </div>
                  <div class="text-sm text-gray-500">KDA</div>
                </div>
              </div>
            </div>
          </div>

          <!-- マッチアップ詳細 -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- 味方チーム -->
            <div class="card">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold" :class="matchData.myParticipant.win ? 'text-blue-600' : 'text-gray-600'">
                  味方チーム
                </h3>
                <div class="text-sm font-medium px-3 py-1 rounded-full"
                     :class="matchData.myParticipant.win ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'">
                  {{ matchData.myParticipant.win ? '勝利' : '敗北' }}
                </div>
              </div>
              <div class="space-y-3">
                <div v-for="player in matchData.myTeam" :key="player.puuid" 
                     class="flex items-center justify-between p-3 rounded-lg transition-colors"
                     :class="player.puuid === matchData.myParticipant.puuid ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50 hover:bg-gray-100'">
                  <div>
                    <div class="font-medium text-gray-900">{{ player.summonerName }}</div>
                    <div class="text-sm text-gray-600">{{ getChampionName(player.championId) }}</div>
                  </div>
                  <div class="text-right">
                    <div class="text-sm font-medium text-gray-900">
                      {{ player.kills }}/{{ player.deaths }}/{{ player.assists }}
                    </div>
                    <div class="text-xs" :class="player.rank ? 'text-blue-600' : 'text-gray-500'">
                      {{ player.rank ? `${player.rank.tier} ${player.rank.rank}` : `Lv.${player.summonerLevel}` }}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- 敵チーム -->
            <div class="card">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold" :class="!matchData.myParticipant.win ? 'text-red-600' : 'text-gray-600'">
                  敵チーム
                </h3>
                <div class="text-sm font-medium px-3 py-1 rounded-full"
                     :class="!matchData.myParticipant.win ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'">
                  {{ !matchData.myParticipant.win ? '勝利' : '敗北' }}
                </div>
              </div>
              <div class="space-y-3">
                <div v-for="player in matchData.enemyTeam" :key="player.puuid" 
                     class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <div>
                    <div class="font-medium text-gray-900">{{ player.summonerName }}</div>
                    <div class="text-sm text-gray-600">{{ getChampionName(player.championId) }}</div>
                  </div>
                  <div class="text-right">
                    <div class="text-sm font-medium text-gray-900">
                      {{ player.kills }}/{{ player.deaths }}/{{ player.assists }}
                    </div>
                    <div class="text-xs" :class="player.rank ? 'text-red-600' : 'text-gray-500'">
                      {{ player.rank ? `${player.rank.tier} ${player.rank.rank}` : `レベル${player.summonerLevel || 0}` }}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- エラー表示 -->
        <div v-if="error" class="card bg-red-50 border-red-200">
          <div class="flex items-center">
            <div class="text-red-600 mr-3">⚠️</div>
            <div>
              <h3 class="text-lg font-semibold text-red-800">エラーが発生しました</h3>
              <p class="text-red-700">{{ error }}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import "@/assets/styles/main.css"
import type { SummonerSearchResult, MatchDetail, LiveMatchDetail } from '~/types'

// リアクティブデータ
const searchForm = ref({
  summonerName: 'shaat00',
  tagLine: 'JP1'
})

const loading = ref(false)
const loadingMatch = ref(false)
const summonerData = ref<SummonerSearchResult | null>(null)
const matchData = ref<MatchDetail | null>(null)
const liveMatchData = ref<LiveMatchDetail | null>(null)
const error = ref('')
const aiAdvice = ref<any | null>(null)
const isAdviceGenerating = ref(false)
let adviceController: AbortController | null = null

// サモナー検索処理
const searchSummoner = async () => {
  if (!searchForm.value.summonerName.trim() || !searchForm.value.tagLine.trim()) {
    error.value = 'サモナー名とタグラインを入力してください'
    return
  }

  loading.value = true
  error.value = ''
  summonerData.value = null

  try {
    // APIエンドポイントにリクエスト
    const response = await $fetch<SummonerSearchResult>('/api/summoner/search', {
      method: 'POST',
      body: {
        summonerName: searchForm.value.summonerName.trim(),
        tagLine: searchForm.value.tagLine.trim()
      }
    })

    summonerData.value = response
    
    // プレイヤー情報取得成功後、まず進行中試合をチェック
    try {
      console.log('プレイヤー情報取得成功、進行中試合をチェック中...')
      await getLiveMatchInternal(response.account.puuid)
    } catch (liveError) {
      console.log('進行中試合なし、過去試合を取得中...')
      // 進行中試合がない場合、過去の試合を取得
      try {
        await getLatestMatchInternal(response.account.puuid)
      } catch (matchError) {
        console.warn('過去試合情報の取得にも失敗:', matchError)
        matchData.value = null
        liveMatchData.value = null
      }
    }
  } catch (err: any) {
    console.error('サモナー検索エラー:', err)
    
    // エラー内容を詳しく表示
    let errorMessage = 'サモナー情報の取得に失敗しました'
    
    if (err.data?.message) {
      errorMessage = err.data.message
    } else if (err.statusMessage) {
      errorMessage = err.statusMessage
    } else if (err.message) {
      errorMessage = err.message
    } else if (typeof err === 'string') {
      errorMessage = err
    }
    
    // ステータスコードも表示
    if (err.status || err.statusCode) {
      const statusCode = err.status || err.statusCode
      errorMessage = `[${statusCode}] ${errorMessage}`
    }
    
    error.value = errorMessage
  } finally {
    loading.value = false
  }
}

// 進行中試合情報取得処理（内部用）
const getLiveMatchInternal = async (puuid: string) => {
  // 進行中試合情報APIにリクエスト
  const response = await $fetch<LiveMatchDetail>('/api/match/live', {
    method: 'POST',
    body: {
      puuid: puuid
    }
  })

  liveMatchData.value = response
  matchData.value = null // 進行中試合がある場合は過去試合データをクリア
  console.log('進行中試合情報取得成功:', response)
}

// 最新試合情報取得処理（内部用）
const getLatestMatchInternal = async (puuid: string) => {
  // 最新試合情報APIにリクエスト
  const response = await $fetch<MatchDetail>('/api/match/latest', {
    method: 'POST',
    body: {
      puuid: puuid
    }
  })

  matchData.value = response
  liveMatchData.value = null // 過去試合がある場合は進行中試合データをクリア
  console.log('最新試合情報取得成功:', response)
}

// 最新試合情報取得処理（ボタン用）
const getLatestMatch = async () => {
  if (!summonerData.value) {
    error.value = 'まずプレイヤー情報を取得してください'
    return
  }

  loadingMatch.value = true
  error.value = ''

  try {
    await getLatestMatchInternal(summonerData.value.account.puuid)
  } catch (err: any) {
    console.error('最新試合情報取得エラー:', err)
    
    // エラー内容を詳しく表示
    let errorMessage = '最新試合情報の取得に失敗しました'
    
    if (err.data?.message) {
      errorMessage = err.data.message
    } else if (err.statusMessage) {
      errorMessage = err.statusMessage
    } else if (err.message) {
      errorMessage = err.message
    } else if (typeof err === 'string') {
      errorMessage = err
    }
    
    // ステータスコードも表示
    if (err.status || err.statusCode) {
      const statusCode = err.status || err.statusCode
      errorMessage = `[${statusCode}] ${errorMessage}`
    }
    
    error.value = errorMessage
  } finally {
    loadingMatch.value = false
  }
}

// ゲームモード表示用関数
const formatGameMode = (queueId: number) => {
  const queueMap: { [key: number]: string } = {
    420: 'ランクソロ/デュオ',
    440: 'ランクフレックス',
    450: 'ARAM',
    480: 'カジュアル',
    830: 'Co-op vs AI',
    400: 'ノーマルドラフト',
    430: 'ノーマルブラインド'
  }
  return queueMap[queueId] || `ゲームモード (${queueId})`
}

// ゲーム時間表示用関数
const formatGameTime = (seconds: number) => {
  // 不正値や負の秒数を0に丸めてMM:SS表示
  const safeSeconds = Number.isFinite(seconds) ? Math.max(0, Math.floor(seconds)) : 0
  const minutes = Math.floor(safeSeconds / 60)
  const remainingSeconds = safeSeconds % 60
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
}

// チャンピオンデータ読み込み
import championData from '@/data/champion.json'

// チャンピオンIDマップを初期化時に作成
const championIdMap: { [key: number]: string } = {}
Object.values(championData.data).forEach((champion: any) => {
  championIdMap[parseInt(champion.key)] = champion.name
})

// チャンピオン名取得関数
const getChampionName = (championId: number) => {
  return championIdMap[championId] || `Champion ${championId}`
}

// チャンピオン名取得（ID→Name）をAI入力用に利用
const getChampionNameById = (id: number) => getChampionName(id)

// AI アドバイス生成（自動/再生成共通）
const generateAdvice = async () => {
  if (!liveMatchData.value) return
  if (adviceController) adviceController.abort()
  adviceController = new AbortController()
  isAdviceGenerating.value = true
  try {
    const body = {
      gameId: String(liveMatchData.value.gameId),
      gameInfo: liveMatchData.value.gameInfo,
      myTeam: liveMatchData.value.myTeam.map((p: any) => ({
        championName: getChampionNameById(p.championId),
        rank: p.rank,
        summonerLevel: p.summonerLevel,
        role: undefined,
        teamId: p.teamId,
      })),
      enemyTeam: liveMatchData.value.enemyTeam.map((p: any) => ({
        championName: getChampionNameById(p.championId),
        rank: p.rank,
        summonerLevel: p.summonerLevel,
        role: undefined,
        teamId: p.teamId,
      })),
    }
    const res: any = await $fetch('/api/advice/generate', { method: 'POST', body, signal: adviceController.signal })
    aiAdvice.value = res.advice || res
  } catch (e) {
    console.warn('AIアドバイス生成失敗:', e)
  } finally {
    isAdviceGenerating.value = false
  }
}

// 自動生成: liveMatchData が更新されたら走らせる
watch(() => liveMatchData.value?.gameId, async (id) => {
  if (id) await generateAdvice()
}, { immediate: false })

// 再生成ボタン
const onRegenerateAdvice = () => {
  if (!isAdviceGenerating.value) generateAdvice()
}

// サモナースペル名取得関数
const getSummonerSpellName = (spellId: number) => {
  const spellMap: { [key: number]: string } = {
    1: 'Cleanse', 3: 'Exhaust', 4: 'Flash', 6: 'Ghost', 7: 'Heal',
    11: 'Smite', 12: 'Teleport', 13: 'Clarity', 14: 'Ignite', 21: 'Barrier',
    32: 'Mark/Dash'
  }
  return spellMap[spellId] || `Spell ${spellId}`
}

// ティアスコアをランク名+数値形式でフォーマット
const formatTierScore = (tierScore: number) => {
  const tierNames = ['', 'Iron', 'Bronze', 'Silver', 'Gold', 'Platinum', 'Emerald', 'Diamond', 'Master', 'Grandmaster', 'Challenger']
  const baseTier = Math.floor(tierScore)
  const tierName = tierNames[baseTier] || 'Unranked'
  
  if (baseTier >= 8) {
    // Master以上はランクなし、数値のみ
    return `${tierName}${tierScore.toFixed(1)}`
  } else if (baseTier >= 1) {
    // 通常ティアは名前+数値
    return `${tierName}${tierScore.toFixed(1)}`
  } else {
    return 'Unranked'
  }
}

// メタ情報
useHead({
  title: 'LoL Insight - サモナー検索',
  meta: [
    { 
      name: 'description', 
      content: 'League of Legends プレイヤー情報を検索・分析するツール' 
    }
  ]
})
</script>
